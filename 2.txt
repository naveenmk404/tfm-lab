import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

np.random.seed(42)
X = np.sort(5 * np.random.rand(80, 1), axis=0)
y = np.sin(X).ravel() + np.random.normal(0, 0.1, X.shape[0])

class RBFNetwork:
    def __init__(self, num_centers=10, gamma=1.0):
        self.num_centers = num_centers
        self.gamma = gamma
        self.centers = None
        self.weights = None

    def fit(self, X, y):
        kmeans = KMeans(n_clusters=self.num_centers, random_state=42)
        kmeans.fit(X)
        self.centers = kmeans.cluster_centers_

        rbf_activations = np.exp(-self.gamma * np.linalg.norm(X[:, np.newaxis] - self.centers, axis=2)**2)

        lr = LinearRegression()
        lr.fit(rbf_activations, y)
        self.weights = lr.coef_

    def predict(self, X):
        rbf_activations = np.exp(-self.gamma * np.linalg.norm(X[:, np.newaxis] - self.centers, axis=2)**2)
        return np.dot(rbf_activations, self.weights)

rbf_model = RBFNetwork(num_centers=10, gamma=1.0)
rbf_model.fit(X, y)

X_test = np.arange(0.0, 5.0, 0.01)[:, np.newaxis]
y_pred = rbf_model.predict(X_test)

plt.scatter(X, y, color='black', label='Training data')
plt.plot(X_test, y_pred, color='red', label='RBF Network Prediction')
plt.title('RBF Network Regression')
plt.legend()
plt.show()