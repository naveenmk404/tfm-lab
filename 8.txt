#8 
import threading
import random
import time

def generate_random_integer():
    while True:
        value = random.randint(1, 100)
        print(f"Generated random integer: {value}")

        if value % 2 == 0:
            even_thread.event.set()
            even_thread.value = value
        else:
            odd_thread.event.set()
            odd_thread.value = value

        time.sleep(1)

def compute_square():
    while True:
        even_thread.event.wait()
        square_value = even_thread.value ** 2
        print(f"Square of {even_thread.value}: {square_value}")
        even_thread.event.clear()

def compute_cube():
    while True:
        odd_thread.event.wait()
        cube_value = odd_thread.value ** 3
        print(f"Cube of {odd_thread.value}: {cube_value}")
        odd_thread.event.clear()

# Create thread objects
random_thread = threading.Thread(target=generate_random_integer)
even_thread = threading.Thread(target=compute_square)
odd_thread = threading.Thread(target=compute_cube)

# Set event flags to False initially
even_thread.event = threading.Event()
even_thread.event.clear()

odd_thread.event = threading.Event()
odd_thread.event.clear()

# Start the threads
random_thread.start()
even_thread.start()
odd_thread.start()

# Wait for all threads to finish (which won't happen in this case since they run indefinitely)
random_thread.join()
even_thread.join()
odd_thread.join()
