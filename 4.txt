import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42)
data = np.random.rand(100, 2)

input_dim = 2
grid_shape = (5, 5)
weights = np.random.rand(grid_shape[0], grid_shape[1], input_dim)

def find_winner(input_vector):
    distances = np.linalg.norm(weights - input_vector, axis=2)
    winner = np.unravel_index(np.argmin(distances), distances.shape)
    return winner

def update_weights(input_vector, winner, learning_rate):
    delta_weights = learning_rate * (input_vector - weights[winner])
    weights[winner] += delta_weights

def train(data, num_epochs, initial_learning_rate):
    for epoch in range(num_epochs):
        learning_rate = initial_learning_rate * (1 - epoch / num_epochs)
        for input_vector in data:
            winner = find_winner(input_vector)
            update_weights(input_vector, winner, learning_rate)

num_epochs = 100
initial_learning_rate = 0.1

train(data, num_epochs, initial_learning_rate)

plt.scatter(data[:, 0], data[:, 1], label='Input Data')
plt.scatter(weights[:, :, 0], weights[:, :, 1], marker='x', s=200, label='Neuron Weights')
plt.title('Kohonen Network - Self-Organizing Map')
plt.legend()
plt.show()