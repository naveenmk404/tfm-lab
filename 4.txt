import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42)
data = np.random.rand(100, 2)

input_dim, grid_shape = 2, (5, 5)
weights = np.random.rand(*grid_shape, input_dim)

def find_winner(input_vector):
    distances = np.linalg.norm(weights - input_vector, axis=2)
    return np.unravel_index(np.argmin(distances), distances.shape)

def update_weights(input_vector, winner, lr):
    weights[winner] += lr * (input_vector - weights[winner])

def train(data, epochs, lr):
    for epoch in range(epochs):
        lr = lr * (1 - epoch / epochs)
        for input_vector in data:
            winner = find_winner(input_vector)
            update_weights(input_vector, winner, lr)

train(data, 100, 0.1)

plt.scatter(data[:, 0], data[:, 1], label='Input Data')
plt.scatter(weights[:, :, 0], weights[:, :, 1], marker='x', s=200, label='Neuron Weights')
plt.title('Kohonen Network - Self-Organizing Map')
plt.legend()
plt.show()
