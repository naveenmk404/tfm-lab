# 1

import sympy as sp
import matplotlib.pyplot as plt
import numpy as np

def main():
    # Define the variable and the function
    x = sp.symbols('x')
    f = x**2  # Change this to your desired function

    # Find the derivative
    f_prime = sp.diff(f, x)

    # Input point
    x_value = 2  # Change this to your desired x-coordinate
    y_value = f.subs(x, x_value)

    # Slope at the given point
    slope = f_prime.subs(x, x_value)

    # Equation of the tangent line
    tangent_line = slope * (x - x_value) + y_value

    # Convert the symbolic expressions to Python functions
    f_func = sp.lambdify(x, f, 'numpy')
    derivative_func = sp.lambdify(x, f_prime, 'numpy')
    tangent_func = sp.lambdify(x, tangent_line, 'numpy')

    # Plot the curve and its derivative
    x_vals = np.linspace(x_value - 2, x_value + 2, 400)
    plt.plot(x_vals, f_func(x_vals), label='Curve: $f(x)$')
    plt.plot(x_vals, derivative_func(x_vals), label='Derivative: $f\'(x)$', linestyle='--')
    plt.scatter(x_value, y_value, color='red', label=f'Point: ({x_value}, {y_value})')

    # Plot tangent line
    tangent_x_vals = np.linspace(x_value - 1, x_value + 1, 400)
    plt.plot(tangent_x_vals, tangent_func(tangent_x_vals), label='Tangent: $y = mx + c$', linestyle=':')

    plt.xlabel('x')
    plt.ylabel('y')
    plt.legend()
    plt.title('Curve, Tangent, and Derivative')
    plt.grid(True)
    plt.show()

    # Print results
    print(f"At x = {x_value}:")
    print(f"Slope: {slope}")
    print(f"Equation of Tangent: {tangent_line}")
    print(f"Derivative: {f_prime}")

if __name__ == "__main__":
    main()
