# 9 

import numpy as np
import matplotlib.pyplot as plt

class KohonenNetwork:
    def __init__(self, input_size, map_size):
        self.weights = np.random.rand(*map_size, input_size)
        self.map_size = map_size

    def find_winner(self, input_pattern):
        return np.unravel_index(np.argmin(np.linalg.norm(self.weights - input_pattern, axis=-1)), self.weights.shape[:2])

    def update_weights(self, input_pattern, winner, learning_rate, radius):
        d = np.linalg.norm(np.indices(self.map_size).T - np.array(winner).reshape(-1, 2), axis=-1)
        influence = np.exp(-d**2 / (2 * radius**2))
        self.weights += learning_rate * influence[:, :, None] * (input_pattern - self.weights)

    def train(self, data, epochs, lr=0.1, radius=None):
        radius = radius or max(self.map_size) / 2
        for epoch in range(epochs):
            lr, radius = lr * np.exp(-epoch / epochs), radius * np.exp(-epoch / epochs)
            for input_pattern in data:
                winner = self.find_winner(input_pattern)
                self.update_weights(input_pattern, winner, lr, radius)

    def visualize_map(self, data):
        plt.figure(figsize=(10, 10))
        plt.imshow(np.sum(self.weights, axis=-1), cmap='viridis', interpolation='nearest')
        plt.colorbar(), plt.title('Kohonen Network Map'), plt.show()

# Example usage:
if __name__ == "__main__":
    data = np.random.rand(100, 2)
    kn = KohonenNetwork(2, (10, 10))
    kn.train(data, epochs=100)
    kn.visualize_map(data)
